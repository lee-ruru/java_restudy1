package day3;

public class Sample1 {

	public static void main(String[] args) {
		// 04-04 for문
		//for문도 while문과 마찬가지로 문장을 반복해서 수행해야 할 경우에 사용한다.
		//1.for문의 구조
		//for문의 예제
		//for과 continue
		//이중 for문
		
		//for문의 구조
		//for문은 에제를 통해서 알아보는 것이 가장 쉽다, 예제를 따라해 보도록 하자
		//예 전형적인 for문
		
		String[] numbers = {"one", "two", "three"};
		for(int i=0; i<numbers.length; i++) {
			System.out.println(numbers[i]);
		}
		//출력결과는 다음과 같다
		//one
		//two
		//three
		
		//numbers배열의 첫번째 요소부터 마지막 요소까지 출력하는 예이다
		//for문의 조건문은 세미콜론(;)을 구분자로 세 부분으로 나뉘어진다.
		//for(초기치; 조건문; 증가치){
		//   ...
		// }
		// 위에에서는 조기치는 int i=0이 되고 조건문은 i<numbers.length
		// 그리고 증가치는 i++이 된다 즉 i값이 numbers의 객수보다 작은 동안 계속
		//i값을 증가시킨다는 의미이다. while문과 비슷하지만 웑가 컴팩트하게 잘 짜여진
		// 느낌이 나는것이 for문의 매력이라고 할 수 있다.
		
		//for문의 에제
		// for문의 쓰임새를 알기위해서 다음을 가정해 보자.
		// "총 다섯명의 학생이 시험을 보았는데 시험점수가 60점이 넘으면 합격이고 그렇지 않으면 
		// 불합격이다. 합격인지 불합격인지에 대한 결과를 보여준다"
		// 우선 5명의 학생의 시험성적을 다음과 같이 표현했따.
		int[] marks = {90, 25, 67, 45, 80};
		//1번학생은 90점이고 5번학생은 80점이다
		// 이런 점수를 하례러 검사하여 합격여부를 알려주는 프로그램을 만들어보자.
		
		int[] marks2 = {90, 25, 67, 45, 80};
		for(int i=0; i<marks2.length; i++) {
			if (marks2[i] >= 60) {
				System.out.println((i+1)+"번 학생은 합격입니다.");
			}else {
				System.out.println((i+1)+"번학생은 불합격 입니다.");
			}
		}
		//i값이 1씩 증가하며 for문안의 문장들이 수행된다. 따라서 marks2[i]는 차례로 
		// 90, 25, 67, 45, 80의 값울 갖게된다. marks2[i}가 60이상이면
		// 합격메시지를 출력하고 60을 넘지않으면 불합격 메시지를 출력한다 i가 marks의 객수인 5보다
		// 크게되면 for문이 중지된다.
		
		//for와 continue
		//while 문에서 알아보았던 continue가 for문에도 동일하게 적용된다. 즉, for문 안의
		// 문장을 수행하는 도중에 continue문을 만나면 for문의 처음으로 돌아간다.
		// 위의 예제를 그대로 이용햐서 60점 이상인 사람에게는 축하메세지를 보내고 나머지 사람에게는
		// 아무런 메세지도 전하지않는 프로그램을 만들어보자.
		int[]marks3 = {90, 25, 67, 45, 80};
		for(int i=0; i<marks3.length; i++) {
			if (marks3[i] < 60) {
			continue;
			}
			System.out.println((i+1)+"번학생 축하합니다.합격입니다.");
			}
		// 점수가 60점 미만인 학생일 경우에는 marks3[i] < 6이 참이되어 continue문이 수행된다.
		//따라서 축하메시지를 출력하는 부분을 수행하지않고 for문의 첫부분으로 돌아가게된다.
		//while문과 마찬가지로 for문안에서 break문장을 만나면 for문을 벗어난다.
		
		//이중for문
		//for문을 두번 이용하면 아주 간단하게 구구단을 출력해 볼 수가 있따.
		for(int i=2; i<10; i++) {
			for(int j=1; j<10; j++) {
				System.out.println(i*j+"");
			}
			System.out.println("");
		}
		// 위의 예를 보면 for가 두번 사용되었다 먼저 2부터 9까지의 숫자가 차례로 i에 대입된다. i가 처음 2일떄
		// 다시 for문을 만나게 된다. 이제 1부터 9까지의 숫자가 j에 대입되고 그 다음 문장인
		// System.out.println(i*j+"");를 수행한다 따라서 i가 2일때 2*1, 2*2,,,까지 
		// 차레로 수행되며 그 값을 출력하게된다. 그다음에는 i가 3일때 역시 2일때와 마찬가지로
		// 수행될것이고 i가 9일때까지 계속 반복하게된다.
		// 위에서 system.out.print와 system.out.println은 마지막에 줄바꿈문자
		// (\n)을 포함하여 출력하는 차이가 있다 즉, 2단 3단 처럼 한단이 끝날때만 줄바꿈 문자를 출력하기 위해
		// 위와 같이 구분하여 사용한 것이다.
		

	}

}
